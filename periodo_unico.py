# -*- coding: utf-8 -*-
"""Periodo_unico.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nf2JoaFhx6OJZZcx5KOptmFE4GRTXAte
"""

### Modelo de produccion de un periodo unico ###

# Instalar a siguiente paqueteria si el codigo marca error:
#!pip install pulp

import pulp

# Crear el problema de maximización
modelo = pulp.LpProblem("Producción_Ropa", pulp.LpMaximize)

# Definición de variables de decisión
x = [pulp.LpVariable(f"x{i+1}", lowBound=0) for i in range(4)]  # Producción
s = [pulp.LpVariable(f"S{i+1}", lowBound=0) for i in range(4)]  # Escasez

# Parámetros
utilidad = [30, 40, 20, 10]
penalizacion = [15, 20, 10, 8]
demanda = [800, 750, 600, 500]

# Matriz de tiempos por departamento
tiempos = [
    [0.30, 0.30, 0.25, 0.15],  # Corte
    [0.25, 0.35, 0.30, 0.10],  # Aislamiento
    [0.45, 0.50, 0.40, 0.22],  # Costura
    [0.15, 0.15, 0.10, 0.05]   # Empaque
]

capacidad = 1000

# Función objetivo: Maximizar utilidad neta
modelo += pulp.lpSum([utilidad[i] * x[i] for i in range(4)]) - pulp.lpSum([penalizacion[i] * s[i] for i in range(4)])

# Restricciones de capacidad por departamento
for dept in range(4):
    modelo += pulp.lpSum([tiempos[dept][i] * x[i] for i in range(4)]) <= capacidad

# Restricciones de demanda
for i in range(4):
    modelo += x[i] + s[i] == demanda[i]

# Resolver el problema
modelo.solve()

# Resultados
print(f"Estado: {pulp.LpStatus[modelo.status]}")
print(f"Utilidad neta óptima: {pulp.value(modelo.objective)}\n")
for i in range(4):
    print(f"Producción x{i+1}: {x[i].varValue:.2f}")
    print(f"Escasez S{i+1}: {s[i].varValue:.2f}")