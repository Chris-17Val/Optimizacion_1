# -*- coding: utf-8 -*-
"""Periodos_multiples.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CzMNAYPEI1Lgkv_6Z6XBtykx8FnItPjE
"""

### Modelo de producción en inventario durante periodos múltiples ###

# Instalar a siguiente paqueteria si el codigo marca error:
# !pip install pulp

import pulp

# Crear el problema de minimización
modelo = pulp.LpProblem("Produccion_e_Inventario", pulp.LpMinimize)

# Parámetros
costo_prod = [50, 45, 55, 48, 52, 50]  # Costo de producción por mes
costo_almacen = 8                     # Costo de almacenamiento por ventana
demanda = [100, 250, 190, 140, 220, 110]  # Demanda por mes

# Variables de decisión
x = [pulp.LpVariable(f"x{i+1}", lowBound=0) for i in range(6)]  # Producción
I = [pulp.LpVariable(f"I{i+1}", lowBound=0) for i in range(6)]  # Inventario

# Función objetivo: Costo total = producción + almacenamiento
modelo += (
    pulp.lpSum([costo_prod[i] * x[i] for i in range(6)]) +
    costo_almacen * pulp.lpSum([I[i] for i in range(6)])
)

# Restricciones de inventario
modelo += x[0] - I[0] == demanda[0]
for i in range(1, 6):
    if i == 5:
        modelo += I[i-1] + x[i] == demanda[i]  # Inventario final es cero
    else:
        modelo += I[i-1] + x[i] - I[i] == demanda[i]

# Resolver el problema
modelo.solve()

# Resultados
print(f"Estado de la solución: {pulp.LpStatus[modelo.status]}")
print(f"Costo total mínimo: ${pulp.value(modelo.objective):.2f}\n")
for i in range(6):
    print(f"Producción mes {i+1}: {x[i].varValue:.2f}")
    print(f"Inventario mes {i+1}: {I[i].varValue:.2f}")